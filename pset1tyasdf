{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d7c41cb8",
   "metadata": {},
   "source": [
    "# Problem Set 1 — Four Problems in Dynamic Programming\n",
    "\n",
    "*Markov Decision Processes & DP Methods*\n",
    "\n",
    "**Due: September 26 (Friday), 11:59pm**\n",
    "\n",
    "### Problem 1 — Inscribed Polygon of Maximum Perimeter (Pen & Paper)\n",
    "TODO list:\n",
    "- (a) show Q-value function $Q_{N-1}$ (6pt)\n",
    "- (b) show convexity (6pt)\n",
    "- (c) show optimal control signal $u_{N-1}$ (6pt)\n",
    "- (d) induction to any $k$-th step Q-function $Q_k$ (6pt)\n",
    "- (e) show all optimal control signal $u_k$ (6pt)\n",
    "\n",
    "Bonus:\n",
    "- (f) show convexity (5pt)\n",
    "- (g)(coding) solve the problem using optimization (5pt)\n",
    "### Problem 2 — Proof of convergence of value iteration (Pen & Paper)\n",
    "TODO list:\n",
    "- 2.1 contraction of bellman operator (5pt)\n",
    "- 2.2 linear convergence (5pt)\n",
    "- 2.3 stoping criteria (5pt)\n",
    "- 2.4 iteration bound (5pt)\n",
    "### Problem 3 — Cliffwalk (coding)\n",
    "TODO list:\n",
    "- 3.2 fill in code for policy evaluation (10pt)\n",
    "- 3.3 fill in code for policy iteration (10pt)\n",
    "- 3.4 fill in code for value iteration (10pt)\n",
    "\n",
    "### Problem 4 — Matrix–Vector Representation of DP\n",
    "TODO list:\n",
    "- 4.1 build the transition matrix $P$ (5pt)\n",
    "- 4.2 write bellman equation as matrix form (5pt)\n",
    "- 4.3 solve the matrix equation by fix-point iteration (10pt)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "999f44b8",
   "metadata": {},
   "source": [
    "## 1. Inscribed Polygon of Maximal Perimeter (Pen and Paper)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bccd1ea",
   "metadata": {},
   "source": [
    "In lectures, we have seen how dynamic programming (DP) can compute optimal value functions and optimal policies for finite-horizon MDPs with discrete state space and action space (i.e., the tabular case).\n",
    "\n",
    "In this exercise, we will see that DP can also solve an optimal control problem with continuous state space and action space.\n",
    "This problem is a geometry problem where we try to find the $N$-side polygon inscribed inside a circle with maximum perimeter. We will walk you through the key steps of formulating and solving the problem, while leaving a few mathematical details for you to fill in.\n",
    "\n",
    "Given a circle with radius $1$, we can randomly choose $N$ distinct points on the circle to form a polygon with $N$ vertices and sides, as shown in Fig. 1 with $N=3,4,5$.\n",
    "\n",
    "<figure style=\"text-align:center;\">\n",
    "  <img src=\"https://raw.githubusercontent.com/ComputationalRobotics/2025-ES-AM-158-PSET/main/PSET1/polygon-inside-circle.png\" width=\"600\" alt=\"Inscribed polygon\">\n",
    "  <figcaption style=\"color:#6a737d; font-style:italic;\">\n",
    "    Figure 1. Polygons inscribed inside a circle\n",
    "  </figcaption>\n",
    "</figure>\n",
    "\n",
    "Once the $N$ points are chosen, the $N$-polygon will have a perimeter, i.e., the sum of the lengths of its edges.\n",
    "\n",
    "What is the configuration of the $N$ points such that the resulting $N$-polygon has the maximum perimeter? We claim that the answer is when the $N$-polygon has edges of equal lengths, or in other words, when the $N$ points are placed on the circle evenly.\n",
    "\n",
    "Let us use dynamic programming to prove the claim.\n",
    "\n",
    "To use dynamic programming, we need to define a dynamical system and a reward function.\n",
    "\n",
    "<figure style=\"text-align:center;\">\n",
    "  <img src=\"https://raw.githubusercontent.com/ComputationalRobotics/2025-ES-AM-158-PSET/main/PSET1/sequential-placement-N-point.png\" width=\"360\" alt=\"Inscribed polygon\">\n",
    "  <figcaption style=\"color:#6a737d; font-style:italic;\">\n",
    "    Figure 2. Sequential placement of N points on the circle.\n",
    "  </figcaption>\n",
    "</figure>\n",
    "\n",
    "**Dynamical system.**\n",
    "\n",
    "\n",
    "We will use $\\{x_1, \\ldots, x_N\\}$ to denote the angular positions of the $N$ points to be placed on the circle (with slight abuse of notation, we will call each of those points $x_k$ as well). In particular, as shown in Fig. 2, let us use $x_k$ to denote the angle between the line $O — x_k$ and the vertical line (O is the center of the circle), with zero angle starting at 12 o’clock and clockwise being positive. Without loss of generality, we assume $x_1 = 0$. (if $x_1$ is nonzero, we can always rotate the entire circle so that $x_1 = 0$).\n",
    "\n",
    "After the $k$-th point is placed, we can “control” where the next point $x_{k+1}$ will be, by deciding the incremental angle between $x_{k+1}$ and $x_k$, denoted as $u_k > 0$ in Fig. 2. This is simply saying the dynamics is\n",
    "\n",
    "$$\n",
    "x_{k+1} = x_k + u_k, \\quad k=1,\\ldots,N-1, \\quad x_1 = 0.\n",
    "$$\n",
    "\n",
    "Notice here we did not use an MDP to formulate this problem because the dynamics is deterministic. In the MDP language, this would correspond to, at time step $k$, if the agent takes action $u_k$ at state $x_k$, then the probability of transitioning to state $x_k + u_k$ at time $k+1$ is $1$, and the probability of transitioning to other states is zero.\n",
    "\n",
    "\n",
    "**Reward.**\n",
    "\n",
    "\n",
    "The perimeter of the $N$-polygon is therefore\n",
    "\n",
    "$$\n",
    "g_N(x_N) + \\sum_{k=1}^{N-1} g_k(x_k,u_k),\n",
    "$$\n",
    "\n",
    "with the terminal reward\n",
    "\n",
    "$$\n",
    "g_N(x_N) = 2 \\sin\\left(\\frac{2\\pi-x_N}{2}\\right),\n",
    "$$\n",
    "\n",
    "the distance between $x_N$ and $x_1$ (see Fig. 2), and the running reward\n",
    "\n",
    "$$\n",
    "g_k(x_k,u_k) = 2 \\sin\\left(\\frac{u_k}{2}\\right).\n",
    "$$\n",
    "\n",
    "**Dynamic programming.**\n",
    "\n",
    "We are now ready to invoke dynamic programming. Recall in lectures the key steps of DP are first to initialize the optimal value functions at the terminal time $k=N$, and then perform backward recursion to compute the optimal value functions at time $k=N-1,\\dots,1$.\n",
    "\n",
    "We start by setting\n",
    "\n",
    "$$\n",
    "V_N(x_N) = g_N(x_N) = 2 \\sin\\left(\\frac{2\\pi-x_N}{2}\\right).\n",
    "$$\n",
    "\n",
    "Unlike in lectures where we initialized the terminal value functions as all zero, here we initialize the terminal value functions as $g_N(x_N)$ because there is a \"terminal-state\" reward.\n",
    "\n",
    "We then compute $V_{N-1}(x_{N-1})$ as\n",
    "\n",
    "$$\n",
    "V_{N-1}(x_{N-1})\n",
    "= \\max_{0 < u_{N-1} < 2\\pi-x_{N-1}}\n",
    "\\left\\{\n",
    "  \\underbrace{ 2 \\sin\\left(\\tfrac{u_{N-1}}{2}\\right) + V_N(x_{N-1} + u_{N-1}) }_{Q_{N-1}(x_{N-1}, u_{N-1})}\n",
    "\\right\\},\n",
    "\\tag{9.1}\n",
    "$$\n",
    "\n",
    "where $u_{N-1} < 2\\pi-x_{N-1}$ because we do not want $x_N$ to cross $2\\pi$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c0764d9",
   "metadata": {},
   "source": [
    "\n",
    "**a**. Show that\n",
    "\n",
    "$$\n",
    "Q_{N-1}(x_{N-1}, u_{N-1})\n",
    "= 2 \\sin\\left(\\tfrac{u_{N-1}}{2}\\right)\n",
    "+ 2 \\sin\\left(\\tfrac{2\\pi-x_{N-1}-u_{N-1}}{2}\\right),\n",
    "$$\n",
    "\n",
    "and thus\n",
    "\n",
    "$$\n",
    "\\frac{\\partial Q_{N-1}(x_{N-1}, u_{N-1})}{\\partial u_{N-1}}\n",
    "= \\cos\\left(\\tfrac{u_{N-1}}{2}\\right)\n",
    "- \\cos\\left(\\tfrac{2\\pi-x_{N-1}-u_{N-1}}{2}\\right).\n",
    "$$\n",
    "\n",
    "First, we plug $V_N(x_N)=2\\sin\\!\\big(\\tfrac{2\\pi-x_N}{2}\\big)$ into (9.1) with $x_N=x_{N-1}+u_{N-1}$:\n",
    "\n",
    "$$\n",
    "Q_{N-1}(x_{N-1},u_{N-1})\n",
    "=2\\sin\\!\\left(\\tfrac{u_{N-1}}{2}\\right)\n",
    "+2\\sin\\!\\left(\\tfrac{2\\pi-(x_{N-1}+u_{N-1})}{2}\\right)\n",
    "=2\\sin\\!\\left(\\tfrac{u_{N-1}}{2}\\right)\n",
    "+2\\sin\\!\\left(\\tfrac{2\\pi-x_{N-1}-u_{N-1}}{2}\\right).\n",
    "$$\n",
    "\n",
    "Then we differentiate w.r.t. $u_{N-1}$:\n",
    "\n",
    "$$\\dfrac{d}{du}\\,2\\sin\\!\\left(\\tfrac{u}{2}\\right)\n",
    "= 2\\cdot\\tfrac{1}{2}\\cos\\!\\left(\\tfrac{u}{2}\\right)\n",
    "= \\cos\\!\\left(\\tfrac{u}{2}\\right)$$\n",
    "\n",
    "$$\\dfrac{d}{du}\\,2\\sin\\!\\left(\\tfrac{2\\pi-x_{N-1}-u}{2}\\right)\n",
    "= 2\\cdot\\tfrac{-1}{2}\\cos\\!\\left(\\tfrac{2\\pi-x_{N-1}-u}{2}\\right)\n",
    "= -\\cos\\!\\left(\\tfrac{2\\pi-x_{N-1}-u}{2}\\right)$$\n",
    "\n",
    "$$\n",
    "\\frac{\\partial Q_{N-1}(x_{N-1},u_{N-1})}{\\partial u_{N-1}}\n",
    "=\\cos\\!\\left(\\tfrac{u_{N-1}}{2}\\right)\n",
    "-\\cos\\!\\left(\\tfrac{2\\pi-x_{N-1}-u_{N-1}}{2}\\right).\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a666ead0",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "**b**. Show that $Q_{N-1}(x_{N-1}, u_{N-1})$ is concave (i.e., $-Q_{N-1}(x_{N-1}, u_{N-1})$ is convex) in $u_{N-1}$ for every $x_{N-1} \\in (0, \\pi)$ and $u_{N-1} \\in (0, 2\\pi-x_{N-1})$.\n",
    "(Hint: compute the second derivative of $Q_{N-1}(x_{N-1}, u_{N-1})$ with respect to $u_{N-1}$ and verify it is positive definite)\n",
    "\n",
    "I will drop the lower indices for the time being\n",
    "\n",
    "$$\n",
    "\\frac{\\partial Q}{\\partial u}\n",
    "= \\cos\\!\\left(\\tfrac{u}{2}\\right)\n",
    "- \\cos\\!\\left(\\tfrac{2\\pi - x - u}{2}\\right).\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\frac{\\partial^2 Q}{\\partial u^2}\n",
    "= -\\tfrac{1}{2}\\sin\\!\\left(\\tfrac{u}{2}\\right)\n",
    "- \\tfrac{1}{2}\\sin\\!\\left(\\tfrac{2\\pi - x - u}{2}\\right).\n",
    "$$\n",
    "\n",
    "On the domain:\n",
    "\n",
    "$$\\tfrac{u}{2} \\in (0,\\pi - \\tfrac{x}{2}) \\subset (0,\\pi)$$\n",
    "$$\\tfrac{2\\pi - x - u}{2} \\in (0,\\pi - \\tfrac{x}{2}) \\subset (0,\\pi)$$\n",
    "\n",
    "so both sine terms are strictly positive.\n",
    "\n",
    "$$\n",
    "\\frac{\\partial^2 Q}{\\partial u^2} \\prec 0,\n",
    "\\quad \\forall u\\in(0,2\\pi-x),\\; x\\in(0,\\pi).\n",
    "$$\n",
    "\n",
    "$Q_{N-1}(x,u)$ is strictly concave in $u$.  \n",
    "Equivalently, $-Q_{N-1}(x,u)$ is strictly convex."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a71bd6ca",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "**c**. With a and b, show that the optimal $u_{N-1}$ that solves (9.1) is\n",
    "\n",
    "$$\n",
    "u_{N-1}^\\star = \\frac{2\\pi-x_{N-1}}{2},\n",
    "$$\n",
    "\n",
    "and therefore\n",
    "\n",
    "$$\n",
    "J_{N-1}(x_{N-1}) = 4 \\sin\\left(\\tfrac{2\\pi-x_{N-1}}{4}\\right).\n",
    "$$\n",
    "\n",
    "(Hint: the point at which a concave function’s gradient vanishes must be the unique maximizer of that function.)\n",
    "\n",
    "Set the derivative to zero:\n",
    "$$\n",
    "\\cos\\!\\left(\\tfrac{u}{2}\\right) = \\cos\\!\\left(\\tfrac{2\\pi - x - u}{2}\\right)\n",
    "$$\n",
    "\n",
    "Using $\\cos A = \\cos B \\iff A = \\pm B + 2k\\pi$:\n",
    "\n",
    "1) $\\,\\tfrac{u}{2} = \\tfrac{2\\pi - x - u}{2} + 2k\\pi \\;\\Rightarrow\\; u = \\tfrac{2\\pi - x}{2} + 2k\\pi.$  \n",
    "2) $\\,\\tfrac{u}{2} = -\\tfrac{2\\pi - x - u}{2} + 2k\\pi \\;\\Rightarrow\\; 0 = -2\\pi + x + 4k\\pi.$\n",
    "\n",
    "Given $x\\in(0,\\pi)$ and $u\\in(0,2\\pi-x)$, the only feasible interior solution is obtained with $k=0$ in (1):\n",
    "$$\n",
    "u_{N-1}^\\star = \\frac{2\\pi - x_{N-1}}{2}.\n",
    "$$\n",
    "\n",
    "Now evaluate the optimal value:\n",
    "$$\n",
    "J_{N-1}(x_{N-1})\n",
    "= Q_{N-1}\\!\\left(x_{N-1},\\,u_{N-1}^\\star\\right)\n",
    "= 2\\sin\\!\\left(\\tfrac{u_{N-1}^\\star}{2}\\right)\n",
    "+ 2\\sin\\!\\left(\\tfrac{2\\pi - x_{N-1} - u_{N-1}^\\star}{2}\\right).\n",
    "$$\n",
    "$$\n",
    "J_{N-1}(x_{N-1})\n",
    "= 4 \\sin\\!\\left(\\tfrac{2\\pi - x_{N-1}}{4}\\right).\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "463c9458",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "**d**. Now use induction to show that the $k$-th step dynamic programming\n",
    "\n",
    "$$\n",
    "J_k(x_k)\n",
    "= \\max_{0 < u_k < 2\\pi — x_k}\n",
    "\\left\\{ 2 \\sin\\left(\\tfrac{u_k}{2}\\right) + J_{k+1}(x_k + u_k) \\right\\}\n",
    "$$\n",
    "\n",
    "admits an optimal control\n",
    "\n",
    "$$\n",
    "u_k^\\star = \\frac{2\\pi-x_k}{N-k + 1},\n",
    "$$\n",
    "\n",
    "and optimal cost-to-go\n",
    "\n",
    "$$\n",
    "J_k(x_k) = 2 (N-k + 1) \\, \\sin\\!\\left( \\frac{2\\pi-x_k}{2 (N-k + 1)} \\right).\n",
    "$$\n",
    "\n",
    "\n",
    "**Base case ($k=N$).**  \n",
    "We have (since $N-k+1=1$ when $k=N$):\n",
    "$$\n",
    "J_N(x_N)=2\\cdot 1 \\cdot \\sin\\!\\Big(\\tfrac{2\\pi-x_N}{2\\cdot 1}\\Big)=2\\sin\\!\\Big(\\tfrac{2\\pi-x_N}{2}\\Big),\n",
    "$$.\n",
    "\n",
    "**Inductive step.**  \n",
    "Assume the claim holds at stage \\(k+1\\), i.e.\n",
    "$$\n",
    "J_{k+1}(x) = 2m \\, \\sin\\!\\Big(\\tfrac{2\\pi - x}{2m}\\Big), \n",
    "\\qquad m := N-k \\ (\\ge 1).\n",
    "$$\n",
    "\n",
    "Then the recursion gives\n",
    "$$\n",
    "\\begin{aligned}\n",
    "J_k(x_k)\n",
    "&= \\max_{0<u_k<2\\pi - x_k}\n",
    "\\left\\{ 2\\sin\\!\\Big(\\tfrac{u_k}{2}\\Big) \n",
    "+ J_{k+1}(x_k+u_k) \\right\\} \\\\\n",
    "&= \\max_{0<u_k<2\\pi - x_k}\n",
    "\\left\\{ 2\\sin\\!\\Big(\\tfrac{u_k}{2}\\Big) \n",
    "+ 2m \\, \\sin\\!\\Big(\\tfrac{2\\pi - (x_k+u_k)}{2m}\\Big) \\right\\}.\n",
    "\\end{aligned}\n",
    "$$\n",
    "\n",
    "Now these steps are jsut copies of above with a slight difference. Let's call the funtction inside the max $F$\n",
    "\n",
    "**Concavity in \\(u\\).**  \n",
    "Differentiate:\n",
    "$$\n",
    "F'(u)=\\cos\\!\\Big(\\tfrac{u}{2}\\Big)-\\cos\\!\\Big(\\tfrac{2\\pi-x_k-u}{2m}\\Big),\n",
    "$$\n",
    "$$\n",
    "F''(u)=-\\tfrac{1}{2}\\sin\\!\\Big(\\tfrac{u}{2}\\Big)-\\tfrac{1}{2m}\\sin\\!\\Big(\\tfrac{2\\pi-x_k-u}{2m}\\Big)\\;<\\;0,\n",
    "$$\n",
    "\n",
    "So $F$ is strictly concave on $(0,2\\pi-x_k)$ so any stationary point is the unique maximizer.\n",
    "\n",
    "**First-order condition.**  \n",
    "Similarly to above:\n",
    "$$\n",
    "\\frac{u}{2}=\\frac{2\\pi-x_k-u}{2m}\n",
    "\\;\\Longrightarrow\\;\n",
    "mu=2\\pi-x_k-u\n",
    "\\;\\Longrightarrow\\;\n",
    "u^\\star=\\frac{2\\pi-x_k}{m+1}=\\frac{2\\pi-x_k}{\\,N-k+1\\,}.\n",
    "$$\n",
    "\n",
    "\n",
    "**Optimal value.**  \n",
    "$$\n",
    "\\frac{u^\\star}{2}\n",
    "=\\frac{2\\pi-x_k-u^\\star}{2m}\n",
    "=\\frac{2\\pi-x_k}{2(m+1)}\n",
    "=\\frac{2\\pi-x_k}{2(N-k+1)}.\n",
    "$$\n",
    "Therefore\n",
    "$$\n",
    "\\begin{aligned}\n",
    "J_k(x_k)\n",
    "&=F(u^\\star)\n",
    "=2\\sin\\!\\Big(\\tfrac{u^\\star}{2}\\Big)+2m\\,\\sin\\!\\Big(\\tfrac{2\\pi-x_k-u^\\star}{2m}\\Big)\\\\\n",
    "&=\\big(2+2m\\big)\\,\\sin\\!\\Big(\\tfrac{2\\pi-x_k}{2(m+1)}\\Big)\n",
    "=2\\,(N-k+1)\\,\\sin\\!\\Big(\\tfrac{2\\pi-x_k}{2\\,(N-k+1)}\\Big).\n",
    "\\end{aligned}\n",
    "$$\n",
    "\n",
    "By induction, the formulas hold for all \\(k=1,\\dots,N\\). In particular, the optimal control is\n",
    "$$\n",
    "u_k^\\star=\\frac{2\\pi-x_k}{\\,N-k+1\\,},\n",
    "$$\n",
    "and the optimal cost-to-go is\n",
    "$$\n",
    "J_k(x_k)=2\\,(N-k+1)\\,\\sin\\!\\Big(\\tfrac{2\\pi-x_k}{2\\,(N-k+1)}\\Big).\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ad8ec40",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "**e**. Starting from $x_1 = 0$, what is the optimal sequence of controls?\n",
    "\n",
    "Hopefully now you see why my original claim is true!\n",
    "\n",
    "From part (d), the optimal control at stage \\(k\\) is $$ u_k^\\star=\\frac{2\\pi-x_k}{N-k+1},\\qquad k=1,\\dots,N-1. $$ With $x_1=0$, we get $$ u_1^\\star=\\frac{2\\pi-0}{N}=\\frac{2\\pi}{N},\\qquad x_2=x_1+u_1^\\star=\\frac{2\\pi}{N}. $$ **Claim.** For all $k=1,\\dots,N-1$, $$ x_k=\\frac{(k-1)2\\pi}{N}\\quad\\text{and}\\quad u_k^\\star=\\frac{2\\pi}{N}. $$ **Proof.** Assume $x_k=\\frac{(k-1)2\\pi}{N}$. Then $$ u_k^\\star=\\frac{2\\pi-x_k}{N-k+1} =\\frac{2\\pi-\\frac{(k-1)2\\pi}{N}}{N-k+1} =\\frac{2\\pi\\left(1-\\frac{k-1}{N}\\right)}{N-k+1} =\\frac{2\\pi\\cdot\\frac{N-k+1}{N}}{N-k+1} =\\frac{2\\pi}{N}, $$ and hence $$ x_{k+1}=x_k+u_k^\\star=\\frac{(k-1)2\\pi}{N}+\\frac{2\\pi}{N}=\\frac{k\\,2\\pi}{N}. $$ By induction the claim holds for all \\(k\\). Therefore, the optimal sequence of controls is $$ \\,u_1^\\star=u_2^\\star=\\cdots=u_{N-1}^\\star=\\frac{2\\pi}{N}\\, $$ which places the $N$ points evenly on the circle at $$ x_k=\\frac{(k-1)2\\pi}{N},\\qquad k=1,\\dots,N. $$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33dfd1d1",
   "metadata": {},
   "source": [
    "### Bonus:\n",
    "We are not yet done for this exercise. Since you have probably already spent quite some time on this exercise, I will leave the rest of the exercise a bonus. In case you found this simple geometric problem interesting, you should keep reading as we will use numerical techniques to prove the same claim.\n",
    "\n",
    "In Fig. 2, by denoting\n",
    "\n",
    "$$\n",
    "u_N = 2\\pi - x_N = 2\\pi - (u_1 + \\cdots + u_{N-1})\n",
    "$$\n",
    "\n",
    "as the angle between the line $O — x_N$ and the line $O — x_1$, it is not hard to observe that the perimeter of the $N$-polygon is\n",
    "\n",
    "$$\n",
    "\\sum_{k=1}^N 2 \\sin\\!\\left(\\tfrac{u_k}{2}\\right).\n",
    "$$\n",
    "\n",
    "Consequently, to maximize the perimeter, we can formulate the following optimization\n",
    "\n",
    "$$\n",
    "\\max_{u_1,\\ldots,u_N} \\;\\; \\sum_{k=1}^N 2 \\sin\\!\\left(\\tfrac{u_k}{2}\\right)\n",
    "$$\n",
    "\n",
    "subject to\n",
    "\n",
    "$$\n",
    "u_k > 0, \\; k = 1, \\ldots, N, \\\\\n",
    "u_1 + \\cdots + u_N = 2\\pi\n",
    "\\tag{9.2}\n",
    "$$\n",
    "\n",
    "where $u_k$ can be seen as the angle spanned by the line $x_k — x_{k+1}$ with respect to the center $O$ so that they are positive and sum up to $2\\pi$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b21f4bb8",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "**f**. Show that the optimization (9.2) is convex.\n",
    "(Hint: first show the feasible set is convex, and then show the objective function is concave over the feasible set.)\n",
    "\n",
    "The feasible set is an intersection of an affine hyperplane and open half-spaces, so it is clearly convex. Since each individual $\\frac{u_k}{2} < \\pi$, the objective is a sum of concave functions on the feasible set, therefore also concave.\n",
    "\n",
    "Now that we have shown (9.2) is a convex optimization problem, we know that pretty much any numerical algorithm will guarantee convergence to the globally optimal solution.\n",
    "\n",
    "There are many numerical algorithms that can compute optimal solutions of an optimization problem (Nocedal and Wright 1999). Python provides a nice interface, `scipy.optimize`, to many such algorithms, and let us use `scipy.optimize` to solve (9.2) so we can numerically prove our claim."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5d86a56",
   "metadata": {},
   "source": [
    "\n",
    "**g**. We have provided most of the code necessary for solving (9.2) below. Please fill in the definition of the function `perimeter(u)`, and then run the code. Show your results for $N = 3, 10, 100$. Do the solutions obtained from Python verify our claim?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c9ce6c03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N=3 | Success: True | message: Optimization terminated successfully\n",
      "Perimeter = 5.19615242270663\n",
      "N=10 | Success: True | message: Optimization terminated successfully\n",
      "Perimeter = 6.180339887498607\n",
      "N=100 | Success: True | message: Optimization terminated successfully\n",
      "Perimeter = 6.282151815623377\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/v8/gnshsnbx3qsbck8wy76cxdpm0000gq/T/ipykernel_19201/2571081493.py:57: UserWarning: FigureCanvasAgg is non-interactive, and thus cannot be shown\n",
      "  fig.show()\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from scipy.optimize import minimize\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# -------- Parameters --------\n",
    "N_values = [3, 10, 100]  # List of N values to try\n",
    "plots = []\n",
    "\n",
    "def perimeter(u):\n",
    "    return np.sum(2.0 * np.sin(u / 2.0))\n",
    "\n",
    "def neg_perimeter(u):\n",
    "    # SciPy minimizes; negate to perform maximization\n",
    "    return -perimeter(u)\n",
    "\n",
    "for N in N_values:\n",
    "    # -------- Constraints & initialization --------\n",
    "    eq_cons = {'type': 'eq', 'fun': lambda u: np.sum(u) - 2.0 * np.pi}\n",
    "    bounds = [(0.0, 2.0 * np.pi)] * N\n",
    "    rng = np.random.default_rng(0)\n",
    "    u0 = rng.random(N)\n",
    "    u0 = u0 / u0.sum() * 2.0 * np.pi\n",
    "\n",
    "    # -------- Solve (SLSQP) --------\n",
    "    res = minimize(\n",
    "        neg_perimeter, u0,\n",
    "        method='SLSQP',\n",
    "        bounds=bounds,\n",
    "        constraints=[eq_cons],\n",
    "        options={'maxiter': 2000, 'ftol': 1e-12, 'disp': False}\n",
    "    )\n",
    "\n",
    "    uopt = res.x\n",
    "    print(f\"N={N} | Success: {res.success} | message: {res.message}\")\n",
    "    print(f\"Perimeter = {perimeter(uopt)}\")\n",
    "\n",
    "    # -------- Recover vertex angles x by cumulative sum (x[0]=0; others accumulate preceding gaps) --------\n",
    "    x = np.zeros(N)\n",
    "    x[1:] = np.cumsum(uopt[:-1])\n",
    "\n",
    "    # -------- Plot --------\n",
    "    fig, ax = plt.subplots()\n",
    "    circle = plt.Circle((0, 0), 1.0, fill=False)\n",
    "    ax.add_patch(circle)\n",
    "    ax.scatter(np.cos(x), np.sin(x), s=40, label=\"points\")\n",
    "    ax.set_aspect('equal', adjustable='box')\n",
    "    ax.set_xlim(-1.1, 1.1)\n",
    "    ax.set_ylim(-1.1, 1.1)\n",
    "    ax.set_xlabel(\"x\")\n",
    "    ax.set_ylabel(\"y\")\n",
    "    ax.set_title(f\"N={N}, perimeter={perimeter(uopt):.6f}\")\n",
    "    ax.legend()\n",
    "    plots.append(fig)\n",
    "\n",
    "# Display all plots at the end\n",
    "for fig in plots:\n",
    "    fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7338dc7",
   "metadata": {},
   "source": [
    "This seems to be the equal sided polygons."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a181bad5",
   "metadata": {},
   "source": [
    "## 2. Convergence proof of Value iteration\n",
    "\n",
    "Let the Bellman optimality operator be\n",
    "$$\n",
    "(T^\\star V)(s)=\\max_a\\Big[\\,R(s,a)+\\gamma\\sum_{s'}P(s'|s,a)V(s')\\,\\Big],\n",
    "\\qquad \\gamma\\in[0,1).\n",
    "$$\n",
    "Let $V^\\star$ denote the optimal value function, i.e., $V^\\star=T^\\star V^\\star$.\n",
    "Value iteration is $V_{k+1}=T^\\star V_k$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "553b1668",
   "metadata": {},
   "source": [
    "### 2.1 Contraction\n",
    "\n",
    "We first prove the operator is a $\\gamma$-**contraction**, i.e.\n",
    "$$\n",
    "||V_{k+1}-V^\\star|| \\leq \\gamma ||V_k-V^\\star||\n",
    "$$\n",
    "\n",
    "\n",
    "$$\n",
    "(T^\\star V)(s)=\\max_a \\Bigl[ R(s,a)+\\gamma\\sum_{s'} P(s'|s,a)V(s') \\Bigr],\n",
    "$$\n",
    "\n",
    "$$\n",
    "(T^\\star W)(s)=\\max_a \\Bigl[ R(s,a)+\\gamma\\sum_{s'} P(s'|s,a)W(s') \\Bigr].\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\begin{aligned}\n",
    "|(T^\\star V)(s)-(T^\\star W)(s)|\n",
    "&=\\Bigl|\\max_a \\bigl[R(s,a)+\\gamma \\sum_{s'}P(s'|s,a)V(s')\\bigr]\n",
    "       -\\max_a \\bigl[R(s,a)+\\gamma \\sum_{s'}P(s'|s,a)W(s')\\bigr]\\Bigr| \\\\\n",
    "&\\le \\max_a \\Bigl|\\gamma \\sum_{s'}P(s'|s,a)(V(s')-W(s'))\\Bigr| \\\\\n",
    "&\\le \\gamma \\max_a \\sum_{s'}P(s'|s,a)\\,|V(s')-W(s')| \\\\\n",
    "&\\le \\gamma \\|V-W\\|_\\infty .\n",
    "\\end{aligned}\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\|T^\\star V - T^\\star W\\|_\\infty \\le \\gamma \\|V-W\\|_\\infty.\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\|V_{k+1}-V^\\star\\|_\\infty\n",
    "=\\|T^\\star V_k - T^\\star V^\\star\\|_\\infty\n",
    "\\le \\gamma \\|V_k - V^\\star\\|_\\infty.\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\|V_{k+1}-V^\\star\\|_\\infty \\le \\gamma \\|V_k - V^\\star\\|_\\infty\n",
    "$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90b835d5",
   "metadata": {},
   "source": [
    "### 2.2 linear convergence\n",
    "Next we prove the convergence is actually **linear**, i.e.\n",
    "$$\n",
    "\\|V_k-V^\\star\\|_\\infty \\leq \\gamma^k \\|V_0-V^\\star\\|_\\infty\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\text{Base case }(k=0):\\quad\n",
    "\\|V_0 - V^\\star\\|_\\infty = \\gamma^0 \\|V_0 - V^\\star\\|_\\infty.\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\text{Induction step:}\\ \\text{Assume } \\|V_k - V^\\star\\|_\\infty \\le \\gamma^k \\|V_0 - V^\\star\\|_\\infty.\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\begin{aligned}\n",
    "\\|V_{k+1} - V^\\star\\|_\\infty\n",
    "&= \\|T^\\star V_k - T^\\star V^\\star\\|_\\infty \\\\\n",
    "&\\le \\gamma \\|V_k - V^\\star\\|_\\infty \\\\\n",
    "&\\le \\gamma \\cdot \\gamma^k \\|V_0 - V^\\star\\|_\\infty \\\\\n",
    "&= \\gamma^{k+1} \\|V_0 - V^\\star\\|_\\infty.\n",
    "\\end{aligned}\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\text{Conclusion:}\\quad \\|V_k - V^\\star\\|_\\infty \\le \\gamma^k \\|V_0 - V^\\star\\|_\\infty\\ \\text{for all }k\\in\\mathbb{N}.\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bd797a5",
   "metadata": {},
   "source": [
    "### 2.3 Practical stopping rule\n",
    "\n",
    "In practice we never know what is the true $V^\\star$. But what we can calculate is the difference between two iterations. Here we (1) prove an error bound of $\\|V-V^\\star\\|_\\infty$ by $\\|V_{k+1} - V_k\\|_\\infty$:\n",
    "\n",
    "$$\n",
    "\\|V_k-V^\\star\\|_\\infty \\leq \\frac{\\|V_{k+1} - V_k\\|_\\infty}{1-\\gamma}\n",
    "$$\n",
    "\n",
    "and (2) Compute the tolerance on the consecutive-iterate gap $\\|V_{k+1}-V_k\\|_\\infty$ needed to guarantee $\\|V - V^\\star\\|_\\infty \\le 10^{-6}$ when $\\gamma=0.99$.\n",
    "\n",
    "$$\n",
    "\\begin{aligned}\n",
    "\\|V_k - V^\\star\\|_\\infty\n",
    "&= \\|T^\\star V^\\star - V_k\\|_\\infty \\\\\n",
    "&\\le \\|T^\\star V^\\star - T^\\star V_k\\|_\\infty + \\|T^\\star V_k - V_k\\|_\\infty \\\\\n",
    "&\\le \\gamma \\|V^\\star - V_k\\|_\\infty + \\|T^\\star V_k - V_k\\|_\\infty \\\\\n",
    "&= \\gamma \\|V_k - V^\\star\\|_\\infty + \\|V_{k+1} - V_k\\|_\\infty .\n",
    "\\end{aligned}\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\|V_k-V^\\star\\|_\\infty \\leq \\frac{\\|V_{k+1} - V_k\\|_\\infty}{1-\\gamma}\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f9bb95d",
   "metadata": {},
   "source": [
    "$$\n",
    "\\|V_k - V^\\star\\|_\\infty \\le \\frac{\\|V_{k+1}-V_k\\|_\\infty}{1-\\gamma}\n",
    "\\le 10^{-6}\n",
    "$$\n",
    "$$\n",
    "\\|V_{k+1}-V_k\\|_\\infty \\le (1-\\gamma)\\,10^{-6}.\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\|V_{k+1}-V_k\\|_\\infty \\le 10^{-8}.\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a065e0a",
   "metadata": {},
   "source": [
    "### 2.4 The bound of iterations\n",
    "\n",
    "Assume $\\|V_1 - V_0\\|_\\infty = 1$, $\\gamma = 0.99$. How much iterations do we need to have $\\|V_k - V^\\star\\|_\\infty \\leq 10^{-6}$?\n",
    "\n",
    "$$\n",
    "\\|V_0 - V^\\star\\|_\\infty \\le \\frac{\\|V_1 - V_0\\|_\\infty}{1-\\gamma},\n",
    "$$\n",
    "$$\n",
    "\\|V_0 - V^\\star\\|_\\infty \\le \\frac{1}{1-0.99} = 100.\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\|V_k - V^\\star\\|_\\infty \\;\\le\\; 100 \\cdot (0.99)^k.\n",
    "$$\n",
    "\n",
    "We require\n",
    "$$\n",
    "100 \\cdot (0.99)^k \\le 10^{-6}.\n",
    "$$\n",
    "$$\n",
    "(0.99)^k \\le 10^{-8}.\n",
    "$$\n",
    "$$\n",
    "k \\,\\ln(0.99) \\le \\ln(10^{-8}).\n",
    "$$\n",
    "$$\n",
    "k \\;\\ge\\; \\frac{\\ln(10^{-8})}{\\ln(0.99)}\\approx 1832.84.\n",
    "$$\n",
    "\n",
    "So we need at least **1833 iterations** to guarantee $\\|V_k - V^\\star\\|_\\infty \\le 10^{-6}$.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd169530",
   "metadata": {},
   "source": [
    "## 3. Cliffwalk\n",
    "\n",
    "Implement policy evaluation, policy improvement, value iteration, and policy iteration for the `CliffWalking` task. For clarity and reproducibility, We include a minimal reimplementation of the environment that mirrors Gymnasium’s dynamics and reward scheme.\n",
    "\n",
    "\n",
    "<figure style=\"text-align:center;\">\n",
    "  <img src=\"https://raw.githubusercontent.com/ComputationalRobotics/2025-ES-AM-158-PSET/main/PSET1/cliffwalk.png\" width=\"600\" alt=\"Inscribed polygon\">\n",
    "  <figcaption style=\"color:#6a737d; font-style:italic;\">\n",
    "    Figure 3. Illustration to cliffwalk problem.\n",
    "  </figcaption>\n",
    "</figure>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5782a72c",
   "metadata": {},
   "source": [
    "**CliffWalking (Gym-compatible) — Specification**\n",
    "\n",
    "- **Grid:** 4 rows × 12 columns (row-major indexing; `state_id = row * 12 + col`; index origin at top-left in comments).\n",
    "- **Start:** bottom-left cell `(row=3, col=0)`.\n",
    "- **Goal:** bottom-right cell `(row=3, col=11)`.\n",
    "- **Actions (4):** up (0), right (1), down (2), left (3).\n",
    "- **Rewards:** −1 per step; −100 on entering a cliff cell; 0 at the goal.\n",
    "- **Termination:** episode ends upon reaching the goal; this states are terminal/absorbing. If reaching cliff will go back to start.\n",
    "\n",
    "**Transition table**\n",
    "\n",
    "- `P[state][action] → list[(prob, next_state, reward, done)]`\n",
    "- Deterministic dynamics: each list contains a single tuple with `prob = 1.0` after handling boundaries, cliff, and goal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3422e418",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "State count=48, Action count=4\n"
     ]
    }
   ],
   "source": [
    "import copy\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import gymnasium as gym\n",
    "\n",
    "np.set_printoptions(precision=3, suppress=True)\n",
    "\n",
    "# Create Gym CliffWalking environment (v1).\n",
    "env_gym = gym.make(\"CliffWalking-v1\", render_mode=\"ansi\")\n",
    "nS, nA = env_gym.observation_space.n, env_gym.action_space.n\n",
    "# The CliffWalking grid is 4 × 12; actions are 0=UP, 1=RIGHT, 2=DOWN, 3=LEFT.\n",
    "print(f\"State count={nS}, Action count={nA}\")\n",
    "\n",
    "# -------------------------------------------------------------------\n",
    "# Utility: pretty-print a value function as a 2D grid (nrow × ncol).\n",
    "# Values can be any (nS,) array-like; states are indexed row-major:\n",
    "# State_id = row * ncol + col\n",
    "# -------------------------------------------------------------------\n",
    "def print_values(values, nrow: int, ncol: int, title: str = \"State Values\"):\n",
    "    \"\"\"Print a value table in grid form.\"\"\"\n",
    "    values = np.asarray(values).reshape(nrow, ncol)\n",
    "    print(title)\n",
    "    for r in range(nrow):\n",
    "        print(\" \".join(f\"{values[r, c]:6.2f}\" for c in range(ncol)))\n",
    "    print()\n",
    "\n",
    "# -------------------------------------------------------------------\n",
    "# Utility: pretty-print a policy on the CliffWalking grid.\n",
    "# \n",
    "# Accepted pi formats for each state s:\n",
    "# - Int a               : deterministic action\n",
    "# - Length-4 vector     : Q-values or preferences; we render argmax (ties shown)\n",
    "# - Length-4 probabilities (stochastic policy): greedy action(s) by max prob\n",
    "# \n",
    "# Notes:\n",
    "# - Uses Gym's action order: 0=UP(↑), 1=RIGHT(→), 2=DOWN(↓), 3=LEFT(←)\n",
    "# - Terminal states in CliffWalking (bottom row except col=0) are marked:\n",
    "# S at (last_row, 0), C for cliff cells (last_row, 1..ncol-2), G at (last_row, ncol-1)\n",
    "# -------------------------------------------------------------------\n",
    "def print_policy(pi, nrow: int, ncol: int, title: str = \"Policy\"):\n",
    "    \"\"\"Print a deterministic/stochastic policy.\n",
    "    - If pi is a list of lists (length 4): treat as stochastic over [up, down, left, right].\n",
    "    - We render the greedy direction; if ties exist, we list all best arrows.\n",
    "    \"\"\"\n",
    "    arrow = {0:\"^\", 1:\">\", 2:\"v\", 3:\"<\"}  # Order aligned with env actions in this notebook\n",
    "    print(title)\n",
    "    for i in range(nrow):\n",
    "        row_syms = []\n",
    "        for j in range(ncol):\n",
    "            s = i*ncol + j\n",
    "            p = pi[s]\n",
    "            # Determine best action(s)\n",
    "            if isinstance(p, list) and len(p) == 4:\n",
    "                best = np.argwhere(np.array(p) == np.max(p)).flatten().tolist()\n",
    "            elif isinstance(p, int):\n",
    "                best = [p]\n",
    "            else:\n",
    "                # Fallback: greedy over provided vector/array\n",
    "                arr = np.array(p, dtype=float).ravel()\n",
    "                best = np.argwhere(arr == np.max(arr)).flatten().tolist()\n",
    "            # Special case: terminals on bottom row except j==0\n",
    "            if i == nrow-1 and j > 0:\n",
    "                row_syms.append(\"T\")\n",
    "            else:\n",
    "                row_syms.append(\"\".join(arrow[a] for a in best))\n",
    "        print(\" \".join(sym if sym else \".\" for sym in row_syms))\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc0f7f98",
   "metadata": {},
   "source": [
    "### 3.1 Define Environment Model (no need to fill in)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "48012a41",
   "metadata": {},
   "outputs": [],
   "source": [
    "class CliffWalkingEnv:\n",
    "    \"\"\"Cliff Walking environment (Gym-compatible dynamics)\n",
    "\n",
    "    State indexing\n",
    "    --------------\n",
    "    - Flattened row-major: state_id = row * ncol + col\n",
    "    - Rows: 0..nrow-1 (top → bottom), Cols: 0..ncol-1 (left → right)\n",
    "\n",
    "    Actions (match Gym/toy_text)\n",
    "    ----------------------------\n",
    "    - 0: UP (↑), 1: RIGHT (→), 2: DOWN (↓), 3: LEFT (←)\n",
    "\n",
    "    Grid (nrow=4, ncol=12)\n",
    "    ----------------------\n",
    "        [  0] [  1] [  2] [  3] [  4] [  5] [  6] [  7] [  8] [  9] [ 10] [ 11]\n",
    "        [ 12] [ 13] [ 14] [ 15] [ 16] [ 17] [ 18] [ 19] [ 20] [ 21] [ 22] [ 23]\n",
    "        [ 24] [ 25] [ 26] [ 27] [ 28] [ 29] [ 30] [ 31] [ 32] [ 33] [ 34] [ 35]\n",
    "        [36=S] [37=C] [38=C] [39=C] [40=C] [41=C] [42=C] [43=C] [44=C] [45=C] [46=C] [47=G]\n",
    "\n",
    "    Legend\n",
    "    ------\n",
    "    - S (start):  (row=3, col=0)   -> state 36\n",
    "    - C (cliff):  (row=3, col=1..10) -> states 37..46\n",
    "    - G (goal):   (row=3, col=11)  -> state 47\n",
    "\n",
    "    Termination & rewards\n",
    "    ---------------------\n",
    "    - Stepping into a cliff cell: reward = -100, done = False, go back to start\n",
    "    - Any other move:             reward = -1,   done = False\n",
    "    - Terminal states are absorbing: once in {goal}, any action keeps you there with reward 0.\n",
    "    \"\"\"\n",
    "\n",
    "    # Action constants for clarity\n",
    "    A_UP, A_RIGHT, A_DOWN, A_LEFT = 0, 1, 2, 3\n",
    "\n",
    "    def __init__(self, ncol: int = 12, nrow: int = 4):\n",
    "        self.ncol = int(ncol)\n",
    "        self.nrow = int(nrow)\n",
    "        self.nS = self.nrow * self.ncol\n",
    "        self.nA = 4\n",
    "        # Transition table: P[state][action] = [(prob, next_state, reward, done)]\n",
    "        self.P = self._create_P()\n",
    "\n",
    "    def _create_P(self):\n",
    "    # Allocate empty transition table\n",
    "        P = [[[] for _ in range(self.nA)] for _ in range(self.nS)]\n",
    "\n",
    "        # Movement deltas in (dx, dy), matching action order: 0↑, 1→, 2↓, 3←\n",
    "        # NOTE: x increases to the right (columns), y increases downward (rows).\n",
    "        deltas = {\n",
    "            self.A_UP:    ( 0, -1),\n",
    "            self.A_RIGHT: ( 1,  0),  # (1, 0) Written to hint order; same as (1, 0)\n",
    "            self.A_DOWN:  ( 0,  1),\n",
    "            self.A_LEFT:  (-1,  0),\n",
    "        }\n",
    "\n",
    "        start_s = (self.nrow - 1) * self.ncol + 0\n",
    "        goal_s  = (self.nrow - 1) * self.ncol + (self.ncol - 1)\n",
    "\n",
    "        for r in range(self.nrow):\n",
    "            for c in range(self.ncol):\n",
    "                s = r * self.ncol + c\n",
    "\n",
    "                if r == self.nrow - 1 and c > 0:\n",
    "                    for a in range(self.nA):\n",
    "                        P[s][a] = [(1.0, s, 0.0, True)]\n",
    "                    continue\n",
    "\n",
    "                for a in range(self.nA):\n",
    "                    dx, dy = deltas[a]\n",
    "\n",
    "                    nc = min(self.ncol - 1, max(0, c + dx))\n",
    "                    nr = min(self.nrow - 1, max(0, r + dy))\n",
    "\n",
    "                    ns = nr * self.ncol + nc\n",
    "                    reward = -1.0\n",
    "                    done = False\n",
    "\n",
    "                    if nr == self.nrow - 1 and 1 <= nc <= self.ncol - 2:\n",
    "                        ns = start_s          \n",
    "                        reward = -100.0\n",
    "                        done = False\n",
    "\n",
    "                    elif nr == self.nrow - 1 and nc == self.ncol - 1:\n",
    "                        done = True\n",
    "\n",
    "                    P[s][a] = [(1.0, ns, reward, done)]\n",
    "\n",
    "        return P\n",
    "\n",
    "\n",
    "# Build environment\n",
    "env = CliffWalkingEnv(ncol=12, nrow=4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "572fedfe",
   "metadata": {},
   "source": [
    "### 3.2 Policy Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "72beca54",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Policy evaluation converged in 494 iteration(s).\n",
      "Value Function under Random Policy\n",
      "-143.21 -147.36 -151.35 -153.93 -155.11 -155.06 -153.67 -150.46 -144.47 -134.46 -119.99 -105.22\n",
      "-164.99 -174.34 -180.41 -183.52 -184.80 -184.83 -183.63 -180.70 -174.70 -163.02 -141.34 -108.39\n",
      "-207.96 -237.09 -246.20 -249.36 -250.43 -250.52 -249.79 -247.82 -243.20 -231.68 -199.50 -97.21\n",
      "-261.35   0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00\n",
      "\n"
     ]
    }
   ],
   "source": [
    "def policy_evaluation(env, pi, gamma=0.95, theta=1e-10):\n",
    "    \"\"\"Iterative policy evaluation for a given stochastic policy π(a|s).\n",
    "\n",
    "    Args:\n",
    "        env: environment with a tabular transition model env.P where\n",
    "             P[s][a] = [(prob, next_state, reward, done)].\n",
    "        pi:  policy probabilities shaped [nS][4]; each pi[s] is a length-4 list\n",
    "             over actions [UP, RIGHT, DOWN, LEFT].\n",
    "        gamma: discount factor ∈ [0, 1).\n",
    "        theta: convergence threshold on the ∞-norm of value updates.\n",
    "\n",
    "    Returns:\n",
    "        v: list of state values of length nS.\n",
    "    \"\"\"\n",
    "    nS = env.nrow * env.ncol\n",
    "    v = [0.0] * nS  # Initialize V(s)=0\n",
    "    it = 1  # Iteration counter (logging only)\n",
    "\n",
    "    while True:\n",
    "        max_diff = 0.0\n",
    "        new_v = [0.0] * nS\n",
    "\n",
    "        for s in range(nS):\n",
    "            v_sum = 0.0  # Σ_a π(a|s) * Q(s,a)\n",
    "            for a in range(4):\n",
    "                q_sa = 0.0  # Q(s,a) = Σ_{s',r} p(s',r|s,a) * [r + γ V(s')]\n",
    "                for prob, next_s, reward, done in env.P[s][a]:\n",
    "                    q_sa += prob * (reward + gamma * v[next_s])\n",
    "                v_sum += pi[s][a] * q_sa\n",
    "\n",
    "            new_v[s] = v_sum\n",
    "            max_diff = max(max_diff, abs(new_v[s] - v[s]))\n",
    "\n",
    "        v = new_v\n",
    "        if max_diff < theta:\n",
    "            break\n",
    "        it += 1\n",
    "\n",
    "    print(f\"Policy evaluation converged in {it} iteration(s).\")\n",
    "    return v\n",
    "\n",
    "\n",
    "# --- Example: evaluate a uniform random policy ---\n",
    "pi = [[0.25, 0.25, 0.25, 0.25] for _ in range(env.nrow * env.ncol)]\n",
    "gamma = 0.95\n",
    "\n",
    "v = policy_evaluation(env, pi, gamma)\n",
    "\n",
    "# Pretty-print the value function as a 4×12 grid\n",
    "print_values(v, env.nrow, env.ncol, title=\"Value Function under Random Policy\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da66ff59",
   "metadata": {},
   "source": [
    "### 3.3 Policy Iteration\n",
    "\n",
    "Policy Iteration alternates between:\n",
    "1) **Policy Evaluation**: compute the state-value function $V^{\\pi}$ of the current policy $\\pi$\n",
    "2) **Policy Improvement**: update $\\pi$ to be greedy w.r.t. $V^{\\pi}$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "37e91266",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Policy evaluation converged in 494 iteration(s).\n",
      "Policy improvement completed.\n",
      "Policy evaluation converged in 450 iteration(s).\n",
      "Policy improvement completed.\n",
      "Policy evaluation converged in 403 iteration(s).\n",
      "Policy improvement completed.\n",
      "Policy evaluation converged in 15 iteration(s).\n",
      "Policy improvement completed.\n",
      "Policy evaluation converged in 15 iteration(s).\n",
      "Policy improvement completed.\n",
      "Policy iteration converged in 5 improvement step(s).\n",
      "Optimal Value Function\n",
      "-10.25  -9.73  -9.19  -8.62  -8.03  -7.40  -6.73  -6.03  -5.30  -4.52  -3.71  -2.85\n",
      " -9.73  -9.19  -8.62  -8.03  -7.40  -6.73  -6.03  -5.30  -4.52  -3.71  -2.85  -1.95\n",
      " -9.19  -8.62  -8.03  -7.40  -6.73  -6.03  -5.30  -4.52  -3.71  -2.85  -1.95  -1.00\n",
      " -9.73   0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00\n",
      "\n",
      "Optimal Policy\n",
      ">v >v >v >v >v >v >v >v >v >v >v v\n",
      ">v >v >v >v >v >v >v >v >v >v >v v\n",
      "> > > > > > > > > > > v\n",
      "^ T T T T T T T T T T T\n",
      "\n"
     ]
    }
   ],
   "source": [
    "def policy_improvement(env, pi, v, gamma=0.95):\n",
    "    \"\"\"Greedy policy improvement w.r.t. the current state-value function V.\n",
    "\n",
    "    For each state s:\n",
    "      1) Compute Q(s,a) = Σ_{s'} P(s'|s,a)[ r(s,a,s') + γ V(s') ] for all a.\n",
    "      2) Find the action(s) with maximal Q(s,a).\n",
    "      3) Update π(·|s) to split probability uniformly among all maximizers (tie-aware).\n",
    "\n",
    "    Args:\n",
    "        env: Tabular environment with transitions env.P where\n",
    "             P[s][a] = [(prob, next_state, reward, done)].\n",
    "        pi:  Current (possibly stochastic) policy, shape [nS][4]; updated in-place.\n",
    "        v:   Current state-value function V(s), length nS.\n",
    "        gamma: Discount factor.\n",
    "\n",
    "    Returns:\n",
    "        pi: The improved policy (same object, updated in-place).\n",
    "    \"\"\"\n",
    "    nS = env.nrow * env.ncol\n",
    "    nA = 4\n",
    "    eps = 1e-8  # Numerical tolerance for tie-breaking\n",
    "\n",
    "    for s in range(nS):\n",
    "        q_list = []\n",
    "        for a in range(nA):\n",
    "            q_sa = 0.0  # Q(s,a) = Σ_{s',r} p(s',r|s,a) * [r + γ V(s')]\n",
    "            for prob, next_s, reward, done in env.P[s][a]:\n",
    "                q_sa += prob * (reward + gamma * v[next_s])\n",
    "            q_list.append(q_sa)\n",
    "\n",
    "        max_q = max(q_list)\n",
    "        best_actions = [a for a in range(nA) if q_list[a] == max_q]\n",
    "        pi[s] = [1.0 / len(best_actions) if a in best_actions else 0.0 for a in range(nA)]\n",
    "\n",
    "    print(\"Policy improvement completed.\")\n",
    "    return pi\n",
    "\n",
    "\n",
    "# --- Policy Iteration loop ---\n",
    "pi = [[0.25, 0.25, 0.25, 0.25] for _ in range(env.nrow * env.ncol)]\n",
    "iters = 0\n",
    "while True:\n",
    "    v = policy_evaluation(env, pi, gamma)\n",
    "    old_pi = copy.deepcopy(pi)\n",
    "    new_pi = policy_improvement(env, pi, v, gamma)\n",
    "    iters += 1\n",
    "    if old_pi == new_pi:  # Policy is stable\n",
    "        print(f\"Policy iteration converged in {iters} improvement step(s).\")\n",
    "        break\n",
    "\n",
    "# Report results\n",
    "print_values(v, env.nrow, env.ncol, title=\"Optimal Value Function\")\n",
    "print_policy(pi, env.nrow, env.ncol, title=\"Optimal Policy\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "569b7f8d",
   "metadata": {},
   "source": [
    "### 3.4 Value Iteration\n",
    "\n",
    "Value Iteration applies **Bellman optimality** updates directly to $V$. Or one can treat value iteration as one step policy evaluation plus one step policy improvement.\n",
    "\n",
    "After convergence, extract the greedy policy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4065588e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n",
      "Optimal Value Function (Value Iteration)\n",
      "-10.25  -9.73  -9.19  -8.62  -8.03  -7.40  -6.73  -6.03  -5.30  -4.52  -3.71  -2.85\n",
      " -9.73  -9.19  -8.62  -8.03  -7.40  -6.73  -6.03  -5.30  -4.52  -3.71  -2.85  -1.95\n",
      " -9.19  -8.62  -8.03  -7.40  -6.73  -6.03  -5.30  -4.52  -3.71  -2.85  -1.95  -1.00\n",
      " -9.73   0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00\n",
      "\n",
      "Optimal Policy (Value Iteration)\n",
      ">v >v >v >v >v >v >v >v >v >v >v v\n",
      ">v >v >v >v >v >v >v >v >v >v >v v\n",
      "> > > > > > > > > > > v\n",
      "^ T T T T T T T T T T T\n",
      "\n"
     ]
    }
   ],
   "source": [
    "def iterate(env, gamma=0.95, theta=1e-10):\n",
    "    \"\"\"Value Iteration.\n",
    "\n",
    "    Updates V(s) <- max_a Σ_{s'} P(s'|s,a) [ r(s,a,s') + γ V(s') ]\n",
    "    until the maximum state-wise change is below `theta`.\n",
    "\n",
    "    Args:\n",
    "        env: Tabular environment exposing env.P with\n",
    "             P[s][a] = [(prob, next_state, reward, done)] and grid sizes nrow, ncol.\n",
    "        gamma (float): Discount factor in [0, 1).\n",
    "        theta (float): Convergence threshold on the infinity-norm of value updates.\n",
    "\n",
    "    Returns:\n",
    "        list[float]: The converged state-value function V of length nS (= nrow * ncol).\n",
    "\n",
    "    Notes:\n",
    "        - Terminal states are modeled as absorbing with reward 0 in `env.P`.\n",
    "          The Bellman backup naturally yields V(terminal) = 0.\n",
    "        - `deltas` (max per-iteration change) is tracked for debugging but not returned.\n",
    "    \"\"\"\n",
    "    nS, nA = env.nrow * env.ncol, 4\n",
    "    deltas = []\n",
    "    iters = 0\n",
    "    v = [0.0] * nS\n",
    "\n",
    "    while True:\n",
    "        iters += 1\n",
    "        max_diff = 0.0\n",
    "        new_v = [0.0] * nS\n",
    "\n",
    "        for s in range(nS):\n",
    "            # Bellman optimality backup: V(s) = max_a Q(s,a)\n",
    "            q_list = []\n",
    "            for a in range(nA):\n",
    "                q_sa = 0.0  # Q(s,a) = Σ_{s',r} p(s',r|s,a) * [r + γ V(s')]\n",
    "                for prob, next_s, reward, done in env.P[s][a]:\n",
    "                    q_sa += prob * (reward + gamma * v[next_s])\n",
    "                q_list.append(q_sa)\n",
    "            new_v[s] = max(q_list)\n",
    "            max_diff = max(max_diff, abs(new_v[s] - v[s]))\n",
    "\n",
    "        v = new_v\n",
    "        deltas.append(max_diff)\n",
    "        if max_diff < theta:\n",
    "            break\n",
    "    print(iters)\n",
    "    return v\n",
    "\n",
    "\n",
    "def greedy_policy(env, v, gamma=0.95):\n",
    "    \"\"\"Extract a greedy (tie-aware) policy from a value function.\n",
    "\n",
    "    For each state s, compute Q(s,a) and set π(a|s)=1/k for all actions a that\n",
    "    achieve the maximal Q-value (ties split uniformly); 0 otherwise.\n",
    "\n",
    "    Args:\n",
    "        env: Tabular environment with env.P.\n",
    "        v (list[float]): State-value function V(s).\n",
    "        gamma (float): Discount factor.\n",
    "\n",
    "    Returns:\n",
    "        list[list[float]]: Policy π of shape [nS][4], each row summing to 1.\n",
    "    \"\"\"\n",
    "    nS, nA = env.nrow * env.ncol, 4\n",
    "    pi = [[0.0] * nA for _ in range(nS)]\n",
    "    eps = 1e-8  # Numerical tolerance for tie detection\n",
    "\n",
    "    for s in range(nS):\n",
    "        q_list = []\n",
    "        for a in range(nA):\n",
    "            q = 0.0\n",
    "            for (p, next_state, r, done) in env.P[s][a]:\n",
    "                q += p * (r if done else r + gamma * v[next_state])\n",
    "            q_list.append(q)\n",
    "\n",
    "        q_list = np.array(q_list, dtype=float)\n",
    "        max_q = q_list.max()\n",
    "        # Tie-aware argmax\n",
    "        opt_u = np.isclose(q_list, max_q, rtol=0.0, atol=eps)\n",
    "        k = int(opt_u.sum())\n",
    "        pi[s] = (opt_u / k).astype(float).tolist()\n",
    "\n",
    "    return pi\n",
    "\n",
    "\n",
    "# ----- Run Value Iteration and extract greedy policy -----\n",
    "gamma = 0.95  # Discount factor\n",
    "v = iterate(env, gamma=gamma)  # Assumes `env` is already constructed\n",
    "pi = greedy_policy(env, v, gamma=gamma)\n",
    "\n",
    "# Pretty-print results (assumes `print_values` and `print_policy` are defined)\n",
    "print_values(v, env.nrow, env.ncol, title=\"Optimal Value Function (Value Iteration)\")\n",
    "print_policy(pi, env.nrow, env.ncol, title=\"Optimal Policy (Value Iteration)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e865218",
   "metadata": {},
   "source": [
    "## 4. Matrix–vector Representation of DP\n",
    "\n",
    "We’ll use a small finite MDP ($|X|=16$, $|A|=4$) and **matrix** forms to compute the optimal $Q$-function:\n",
    "\n",
    "4.1. Build the **transition matrix**\n",
    "   $\n",
    "   P \\in \\mathbb{R}^{|X||A|\\times |X|}\n",
    "   $\n",
    "   and the **immediate reward** vector\n",
    "   $\n",
    "   r \\in \\mathbb{R}^{|X||A|}.\n",
    "   $\n",
    "\n",
    "4.2. Using the matrix form of the $Q$-value function $Q_\\pi$ and the value function $V_\\pi$ to write down the bellman equation.\n",
    "\n",
    "4.3. Define the **Bellman optimality operator**:\n",
    "   $$\n",
    "   T^\\star(Q) = r + \\gamma\\, P\\, J_Q,\n",
    "   $$\n",
    "   where\n",
    "   $$\n",
    "   (J_Q)(x) = \\max_{a} Q(x,a).\n",
    "   $$\n",
    "   Iterating $Q_{k+1} = T^\\star(Q_k)$ converges to the optimal $Q^\\star$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35440cec",
   "metadata": {},
   "source": [
    "### 4×4 Gridworld — From Bottom‑Left (Start) to Top‑Right (Goal)\n",
    "\n",
    "**States:** 16 cells in a 4×4 grid, row-major indexing with top-left as (row=0, col=0).\n",
    "State id: `s = row * 4 + col`, rows increase downward.\n",
    "\n",
    "**Start:** bottom-left `(row=3, col=0)` → `s_start = 12`\n",
    "**Goal:** top-right `(row=0, col=3)` → `s_goal = 3`\n",
    "\n",
    "**Actions (4):**\n",
    "- `a=0` → UP (↑)\n",
    "- `a=1` → RIGHT (→)\n",
    "- `a=2` → DOWN (↓)\n",
    "- `a=3` → LEFT (←)\n",
    "\n",
    "**Dynamics:** Deterministic. If an action would leave the grid world, the agent stays in place.\n",
    "\n",
    "**Rewards (maximize):**\n",
    "- `-1` per step\n",
    "- `0` in the goal\n",
    "\n",
    "**Terminal:** The goal is absorbing (from goal, any action keeps you at goal with reward 0)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "76ef97dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Grid 4×4. Start=S (row=3,col=0), Goal=G (row=0,col=3)\n",
      " 0  1  2  G \n",
      " 4  5  6  7\n",
      " 8  9 10 11\n",
      " S  13 14 15\n"
     ]
    }
   ],
   "source": [
    "# Grid size\n",
    "nrow, ncol = 4, 4\n",
    "nS = nrow * ncol  # |X| = 16\n",
    "nA = 4  # |A| = 4 (UP, RIGHT, DOWN, LEFT)\n",
    "\n",
    "# Start (bottom-left) and Goal (top-right)\n",
    "s_start = (nrow - 1) * ncol + 0  # 12\n",
    "s_goal  = 0 * ncol + (ncol - 1)  # 3\n",
    "\n",
    "# Row-major state id\n",
    "def s_id(r, c):\n",
    "    return r * ncol + c\n",
    "\n",
    "# For state-action row index in matrices of shape (nS*nA, ...)\n",
    "def sa_id(s, a):\n",
    "    return s * nA + a\n",
    "\n",
    "# Action deltas: 0=UP, 1=RIGHT, 2=DOWN, 3=LEFT\n",
    "DELTAS = {\n",
    "    0: (-1,  0),  # UP:    row-1\n",
    "    1: ( 0,  1),  # RIGHT: col+1\n",
    "    2: ( 1,  0),  # DOWN:  row+1\n",
    "    3: ( 0, -1),  # LEFT:  col-1\n",
    "}\n",
    "\n",
    "# Quick sanity checks and a tiny ASCII map\n",
    "print(\"Grid 4×4. Start=S (row=3,col=0), Goal=G (row=0,col=3)\")\n",
    "for rrow in range(nrow):\n",
    "    line = []\n",
    "    for ccol in range(ncol):\n",
    "        s = s_id(rrow, ccol)\n",
    "        if s == s_start:\n",
    "            line.append(\" S \")\n",
    "        elif s == s_goal:\n",
    "            line.append(\" G \")\n",
    "        else:\n",
    "            line.append(f\"{s:2d}\")\n",
    "    print(\" \".join(line))\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "94e2d4d6",
   "metadata": {},
   "source": [
    "### 4.1 Build Transition Matrix and Reward Vector\n",
    "\n",
    "**Definition:**\n",
    "\n",
    "- **Transition matrix** $P \\in \\mathbb{R}^{|X||A|\\times |X|}$\n",
    "  Rows index state–action pairs $(x,a)$, columns index next states $x'$.\n",
    "  Entry:\n",
    "  $$\n",
    "  P[(x,a),\\,x'] \\;\\equiv\\; \\Pr\\{X_{t+1}=x' \\mid X_t=x,\\; A_t=a\\}.\n",
    "  $$\n",
    "  Row-wise normalization holds: $\\sum_{x'} P[(x,a),x'] = 1$ for every $(x,a)$.\n",
    "\n",
    "- **Reward vector** $r \\in \\mathbb{R}^{|X||A|}$ (reward maximization form)\n",
    "  Each entry is the one-step expected reward under $(x,a)$:\n",
    "  $$\n",
    "  r[(x,a)] \\;\\equiv\\; \\mathbb{E}\\big[\\,R_{t+1}\\mid X_t=x,\\; A_t=a\\,\\big].\n",
    "  $$\n",
    "\n",
    "**Indexing note.**\n",
    "A convenient index for $(x,a)$ is\n",
    "$$\n",
    "i = x\\,|A| + a\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "86995a5d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Build P (|X||A| × |X|) and r (|X||A|)\n",
    "P = np.zeros((nS * nA, nS), dtype=float)\n",
    "r = np.zeros(nS * nA, dtype=float)\n",
    "\n",
    "for s in range(nS):\n",
    "# This will give // and %\n",
    "    r0, c0 = divmod(s, ncol)\n",
    "\n",
    "    for a in range(nA):\n",
    "        _s_id = sa_id(s, a)\n",
    "\n",
    "        # Goal is absorbing with reward 0\n",
    "        if s == s_goal:\n",
    "            P[_s_id, s_goal] = 1.0\n",
    "            r[_s_id] = 0.0\n",
    "            continue\n",
    "\n",
    "        dr, dc = DELTAS[a]\n",
    "        rr = min(nrow - 1, max(0, r0 + dr))\n",
    "        cc = min(ncol - 1, max(0, c0 + dc))\n",
    "        s_next = s_id(rr, cc)\n",
    "\n",
    "        # Deterministic transition\n",
    "        P[_s_id, s_next] = 1.0\n",
    "\n",
    "        # Reward: -1 per step, 0 in goal (already handled above)\n",
    "        r[_s_id] = -1.0\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d5a23e0",
   "metadata": {},
   "source": [
    "### 4.2 Matrix Form of Bellman Consistency and Bellman equation\n",
    "\n",
    "Q-evaluation when a fixed policy $\\pi$ is given:\n",
    "\n",
    "$$\n",
    "Q_\\pi(x,a) = r(x,a) + \\gamma \\,\\mathbb{E}_{x'\\sim P(\\cdot \\mid x,a)} \\, V_\\pi(x') \\tag{4.3(1)}\n",
    "$$\n",
    "\n",
    "The bellman equation:\n",
    "$$\n",
    "Q^\\star(x,a) \\;=\\; r(x,a) \\;+\\; \\gamma \\, \\mathbb{E}_{x' \\sim P(\\cdot \\mid x,a)}\n",
    "\\left\\{ \\max_{a' \\in A} Q^\\star(x',a') \\right\\},\n",
    "\\qquad \\forall (x,a) \\in X \\times A. \\tag{4.3(2)}\n",
    "$$\n",
    "\n",
    "where $Q^\\star$ is the optimal $Q$-value function. Similarly, let us define\n",
    "\n",
    "$$\n",
    "J_Q(x) = \\max_{a \\in A} Q(x,a).\n",
    "$$\n",
    "\n",
    "Question: How to write these equations (4.3(1))&(2) in matrix and operator form?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "570aac90",
   "metadata": {},
   "source": [
    "$$\n",
    "Q_\\pi \\;=\\; r \\;+\\; \\gamma\\, P\\, V_\\pi\n",
    "$$\n",
    "\n",
    "$$\n",
    "Q^\\star \\;=\\; r \\;+\\; \\gamma\\, P\\, J_{Q^\\star}\n",
    "$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "054a258d",
   "metadata": {},
   "source": [
    "### 4.3 Solve bellman equation.\n",
    "\n",
    "Note that $J_Q$ has dimension $|X|$. With these notations, the *Bellman optimality operator* is defined as\n",
    "\n",
    "$$\n",
    "T^\\star Q \\;=\\; g + \\gamma P J_Q,\n",
    "\\tag{2.27}\n",
    "$$\n",
    "\n",
    "which is nothing but a matrix representation of the right-hand side of Bellman equation.\n",
    "This allows us to concisely write the Bellman equation as\n",
    "\n",
    "$$\n",
    "Q = T^\\star Q.\n",
    "\\tag{2.28}\n",
    "$$\n",
    "\n",
    "One can do to solve this equation is through *fix-point iteration*:\n",
    "$$\n",
    "Q_{n+1} = T^\\star Q_n.\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "1b44ffe2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Converged in 8 iterations.\n",
      "\n",
      "Optimal state values J_Q (V*) on the grid:\n",
      " -2.85  -1.95  -1.00  G \n",
      " -3.71  -2.85  -1.95  -1.00\n",
      " -4.52  -3.71  -2.85  -1.95\n",
      " S   -4.52  -3.71  -2.85\n"
     ]
    }
   ],
   "source": [
    "Q = np.zeros((nS * nA), dtype=float)\n",
    "for i in range(1000):\n",
    "    old_Q = Q.copy()\n",
    "    J_Q =  Q.reshape(nS, nA).max(axis=1)\n",
    "    Q = r + gamma * P @ J_Q\n",
    "    if np.max(np.abs(Q - old_Q)) < 1e-10:\n",
    "        print(f\"Converged in {i+1} iterations.\")\n",
    "        break\n",
    "J_Q = Q.reshape(nS, nA).max(axis=1)    \n",
    "print(\"\\nOptimal state values J_Q (V*) on the grid:\")\n",
    "for r0 in range(nrow):\n",
    "    row_vals = []\n",
    "    for c0 in range(ncol):\n",
    "        s = r0 * ncol + c0\n",
    "        if s == s_start:\n",
    "            row_vals.append(\" S \")\n",
    "        elif s == s_goal:\n",
    "            row_vals.append(\" G \")\n",
    "        else:\n",
    "            row_vals.append(f\"{J_Q[s]:6.2f}\")\n",
    "    print(\" \".join(row_vals))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "48c3e114",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pset1",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
